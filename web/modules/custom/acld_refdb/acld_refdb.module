<?php

/**
 * Implementation of hook_menu().
 *
 */
/*
function acld_refdb_menu() {
  $items['admin/config/acld_refdb'] = array(
    'title' => 'ACLD Reference Database Settings',
    'description' => 'Settings for accessing and displaying ACLD Reference Databases',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('acld_refdb_system_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['refdb/%'] = array(
    'title' => 'ACLD Reference Database Access',
    'page callback' => '_acld_refdb_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}
*/

/**
 * Implements hook_views_api().
 */
function acld_refdb_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array(
      'version' => 2,
      'path' => drupal_get_path('module', 'acld_refdb') . '/views',
    );
  }
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'acld_refdb') . '/views',
  );
}
/*
function _acld_refdb_page($nid) {
  $output = '';
  $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);

  // Check to make sure the nid passed in belongs to a node of type 'referencedb'
  if ($node->type != 'referencedb') drupal_goto();

  $user_ip = trim(\Drupal::request()->getClientIp());
  //$user_ip = '192.42.92.110';
  //$user_ip = '192.42.92.98';
  //$user_ip = '192.42.92.229';

  // Determine if the user is internal or external to the ACLD network
  //$on_site_array = _acld_refdb_location(variable_get('acld_refdb_internalips', NULL), variable_get('acld_refdb_hqips', NULL), trim(getenv('REMOTE_ADDR')), $node->field_hq_only[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0]['value']);
  $on_site_array = _acld_refdb_location(\Drupal::config('acld_refdb.settings')->get('acld_refdb_internalips'), \Drupal::config('acld_refdb.settings')->get('acld_refdb_hqips'), $user_ip, $node->field_hq_only[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0]['value']);
  $on_site = $on_site_array[0];

  // send off-site users to the external URL for HQ-only DBs
  // see http://groups.drupaleasy.com/aclib/node/1049#comment-5540
  if ((!$on_site) && ($node->field_hq_only[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0]['value'])) {
    drupal_goto($node->field_external_url[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0]['url']);
  }

  // Determine if the DB requires sign on and handle appropriately
  if ($node->field_require_signon[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0]['value'] != '1') {
    if ($on_site) {
      _acld_refdb_logaccess($node->nid, 0);
      drupal_goto($node->field_internal_url[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0]['url']);
    }
    else {
      _acld_refdb_logaccess($node->nid, 1);
      drupal_goto($node->field_external_url[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0]['url']);
    }
  }

  // If the user is on_site, send them on their way
  if ($on_site) {
    _acld_refdb_logaccess($node->nid, 0);
    drupal_goto($node->field_internal_url[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0]['url']);
  }

  //unset($_SESSION['cardVerified']);
  // see if they have already been verified previously
  $card_verified = isset($_SESSION['cardVerified']) ? $_SESSION['cardVerified'] : NULL;
  // Send them to the external url if they've logged in before and their cookie is still valid,
  //   otherwise give them the library card form.
  if ($card_verified) {
    _acld_refdb_logaccess($node->nid, 1);
    drupal_goto($node->field_external_url[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0]['url']);
  }
  else {
    $output = \Drupal::formBuilder()->getForm('acld_refdb_librarycardform', $nid, $on_site);
  }

  return $output;
}
/*

// id, nid, timestamp, location (NULL=none 0=internal, 1=external)
function _acld_refdb_logaccess($nid, $location, $pattern_matched = NULL) {
  if (!isset($_SESSION['acld_refdb_pattern'])) $_SESSION['acld_refdb_pattern'] = NULL;
  $data = array(
    'nid' => $nid,
    'location' => $location,
    'timestamp' => time(),
    'remote_addr' => \Drupal::request()->getClientIp(),
    'pattern_matched' => $_SESSION['acld_refdb_pattern'],
  );
  //$table = data_get_table('data_table_refdb_access_log');
  //$table->handler()->save($data);
  \Drupal::database()->insert('refdb_access_log')->fields($data)->execute();
}

function _acld_refdb_location($acld_ips, $acld_hqips, $user_ip, $hq_only = FALSE) {
  // on-site is true, else false
  if ($hq_only) {
    return array(_acld_refdb_checkips($acld_hqips, $user_ip), 'hq');
  }
  return array(_acld_refdb_checkips($acld_ips, $user_ip), 'all');
}

function _acld_refdb_checkips($acld_ips, $user_ip) {
  $iplines = explode("\n", $acld_ips);
  $matchBase ='';
  foreach ($iplines as $ipvalue) {
    $subnetpos = strpos($ipvalue, "*");
    if ($subnetpos > 0) {
      $matchBase = \Drupal\Component\Utility\Unicode::substr($ipvalue, 0, $subnetpos);
    }
    else {
      if ($ipvalue && $ipvalue != '') {
        $matchBase = $ipvalue;
      }
    }

    if (\Drupal\Component\Utility\Unicode::substr($user_ip, 0, \Drupal\Component\Utility\Unicode::strlen($matchBase)) == trim($matchBase)) {
      return TRUE;
    }
  }
  return FALSE;
}
/*
function acld_refdb_librarycardform($form, &$form_state, $nid) {
  // if the user has too many retries - send them away.
  if (isset($_SESSION['acld_refdb_cardtries']) && ($_SESSION['acld_refdb_cardtries'] > 10)) {
    drupal_goto('node/'. \Drupal::config('acld_refdb.settings')->get('acld_refdb_failurenodeid'));
  }

  $form['acld_refdb_helptext'] = array(
    '#markup' => \Drupal::config('acld_refdb.settings')->get('acld_refdb_cardformtext'),
  );
  $form['acld_refdb_nid'] = array(
    '#value' => $nid,
    '#type' => 'hidden',
  );
  $form['acld_refdb_librarycardnumber'] = array(
    '#type' => 'textfield',
    '#title' => t('Library Card Number'),
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => TRUE,
    '#description' => 'Enter your library card number.',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );
  return $form;
}
*/
/*
function acld_refdb_librarycardform_validate($form, &$form_state) {
  $card_number = $form_state['values']['acld_refdb_librarycardnumber'];
  //remove any non-digit characters entered (usually spaces).
  $card_number = preg_replace("/[^0-9]/", "", $card_number);
  //check to make sure $card_number matches pattern
  $pattern_matched = _acld_refdb_card_number_matches($card_number);
  if (!$pattern_matched) {
    if (isset($_SESSION['acld_refdb_cardtries'])) {
      $_SESSION['acld_refdb_cardtries'] += 1;
    }
    else {
      $_SESSION['acld_refdb_cardtries'] = 1;
    }
    form_set_error('acld_refdb_librarycardnumber', t('The library card number you entered is not valid.'));
  }
  else {
    $form_state['aclid_refdb_pattern_matched'] = $pattern_matched;
  }
}
*/

/**
 * Determines if card number given matches pattern set in form acld_refdb_librarycardform
 * @param string $card_number
 * @return boolean
 */
function _acld_refdb_card_number_matches($card_number) {
  $original = FALSE;
  $card_pattern = \Drupal::config('acld_refdb.settings')->get('acld_refdb_card_accept');
  $card_prefix = str_replace('*', '', $card_pattern);
  if (!empty($card_pattern) && is_numeric($card_number)) {
    if ((\Drupal\Component\Utility\Unicode::strlen($card_number) == \Drupal\Component\Utility\Unicode::strlen($card_pattern)) && (\Drupal\Component\Utility\Unicode::substr($card_number, 0, \Drupal\Component\Utility\Unicode::strlen($card_prefix)) == $card_prefix)) {
      $original = TRUE;
    }
  }

  $alternate = FALSE;
  $card_pattern = \Drupal::config('acld_refdb.settings')->get('acld_refdb_card_accept_alternate');
  $card_prefix = str_replace('*', '', $card_pattern);
  if (!empty($card_pattern) && is_numeric($card_number)) {
    if ((\Drupal\Component\Utility\Unicode::strlen($card_number) == \Drupal\Component\Utility\Unicode::strlen($card_pattern)) && (\Drupal\Component\Utility\Unicode::substr($card_number, 0, \Drupal\Component\Utility\Unicode::strlen($card_prefix)) == $card_prefix)) {
      $alternate = TRUE;
    }
  }

  // Return a positive integer depending which pattern was matched for logging purposes.
  if ($original) return 1;
  if ($alternate) return 2;
  return FALSE;
}

/*
function acld_refdb_librarycardform_submit($form, &$form_state) {
  $node = \Drupal::entityTypeManager()->getStorage('node')->load($form_state['values']['acld_refdb_nid']);
  $_SESSION['cardVerified'] = TRUE;
  $_SESSION['acld_refdb_cardtries'] = 0; // Reset the cardtries counter.
  $_SESSION['acld_refdb_pattern'] = $form_state['aclid_refdb_pattern_matched'];
  _acld_refdb_logaccess($node->nid, 1, $form_state['aclid_refdb_pattern_matched']);
  drupal_goto($node->field_external_url[\Drupal\Core\Language\Language::LANGCODE_NOT_SPECIFIED][0]['url']);
}
/*

/**
 * Implementation of hook_form().
 *
 * @param array $form_state
 * @return $form
 */
/*
function acld_refdb_system_settings_form($form_state) {
  $form['acld_refdb_internalips'] = array(
    '#type' => 'textarea',
    '#title' => t('ACLD Internal IP Addresses'),
    '#default_value' => \Drupal::config('acld_refdb.settings')->get('acld_refdb_internalips'),
    '#required' => TRUE,
    '#rows' => 3,
    '#description' => 'Enter all (including headquarters) internal IP addresses for ACLD. You may use wildcards (192.168.1.*) Please enter one per line',
  );
  $form['acld_refdb_hqips'] = array(
    '#type' => 'textarea',
    '#title' => t('ACLD Headquarters IP Addresses'),
    '#default_value' => \Drupal::config('acld_refdb.settings')->get('acld_refdb_hqips'),
    '#required' => TRUE,
    '#rows' => 3,
    '#description' => 'Enter only the headquarters IP addresses for ACLD. You may use wildcards (192.168.1.*) Please enter one per line',
  );
  $form['acld_refdb_failurenodeid'] = array(
    '#type' => 'textfield',
    '#title' => t('Failure Node ID'),
    '#default_value' => \Drupal::config('acld_refdb.settings')->get('acld_refdb_failurenodeid'),
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE,
    '#description' => 'Enter the node ID that the user should be sent to if they fail to enter a correct library card number 3 times in a row.',
  );
  $form['acld_refdb_cardformtext'] = array(
    '#type' => 'textfield',
    '#title' => t('Database Access Form Help Text'),
    '#default_value' => \Drupal::config('acld_refdb.settings')->get('acld_refdb_cardformtext'),
    '#size' => 100,
    '#maxlength' => 200,
    '#required' => TRUE,
    '#description' => 'Enter the help text that explains entering the Library Card Number.',
  );
  $form['acld_refdb_card_accept'] = array(
    '#type' => 'textfield',
    '#title' => t('Library Card Number Accept Pattern'),
    '#default_value' => \Drupal::config('acld_refdb.settings')->get('acld_refdb_card_accept'),
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => TRUE,
    '#description' => 'Enter the pattern that users can use for their Library Card Number.  For all spaces that can be any character put a "*"',
  );
  $form['acld_refdb_card_accept_alternate'] = array(
    '#type' => 'textfield',
    '#title' => t('Library Card Number Accept Pattern (alternate)'),
    '#default_value' => \Drupal::config('acld_refdb.settings')->get('acld_refdb_card_accept_alternate'),
    '#size' => 20,
    '#maxlength' => 20,
    '#required' => TRUE,
    '#description' => 'Enter an alternate pattern that users can use for their Library Card Number.  For all spaces that can be any character put a "*"',
  );
  return system_settings_form($form);
}
*/
